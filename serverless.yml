service: ms-${self:custom.serviceName}
frameworkVersion: '3'
useDotenv: true

provider:
  name: aws
  runtime: nodejs16.x
  region: 'us-east-1'
  memorySize: 512
  stage: ${opt:stage, "${env:stage, 'dev'}"}
  apiGateway:
    restApiId: ${ssm:/alumnus/infra/api-gateway/id}
    restApiRootResourceId: ${ssm:/alumnus/infra/api-gateway/root-resource-id}
  environment:
    user_pool_id: { Ref: UserPool }
    client_id: { Ref: UserClient }
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
          Resource: "*"

custom:
  serviceName: auth
  contextPath: ${self:custom.serviceName}
  baseApi: ${self:custom.contextPath}
  funcDir: src/4-framework/functions

functions:
  authorizer:
    handler: ${self:custom.funcDir}/authorizer/authorizer.handler
  createUserIdentity:
    handler: ${self:custom.funcDir}/users/createUserIdentity.handler
  signIn:
    handler: ${self:custom.funcDir}/users/signIn.handler
    events:
      - http:
          path: ${self:custom.baseApi}/sign-in
          method: post
          cors:
            origin: '*'
            headers: '*'
plugins:
  - serverless-esbuild
  - serverless-offline
resources:
  - ${file(./devops/resources/ssm.yml)}
  - ${file(./devops/resources/authorizer.yml)}
  - ${file(./devops/resources/cognito.yml)}
